/*
   Neutron magpie dodeca:
   keyed LFO x 3
   3 LFOs on MIDI channel 1,2,3
   LFO frequency based on MIDI clock
   White notes are even dividers/multipliers black are odd
   each group of 4 outputs are thye same LFO with 90% phase shift.
   new notes will reset the LFO to whatever phase is set to.
   velocity will adjust the LFO amplitude
   4 CCs change parameters.
   CC_A change phase
   CC_B change waveform
   CC_C 
   CC_D
 * */
//

#include <MIDI.h>
//set the CCS to control LFO parameters //cirklon default CCs on new patterns are 1,4,6,10
const uint8_t CC_A = 1;//control phase
const uint8_t CC_B = 4;//control waveform
const uint8_t CC_C = 6;
const uint8_t CC_D = 10;

const uint8_t CHAN = 1;//set the first MIDI channel here! it will use the following 2 so dont go past 14, strange things might happen!
const uint8_t ISRrate = 25;
const uint32_t qPhase = 1073741824;//quarter of 32 bits accumulator
const uint32_t eCiel = 33554443; //32 bits / 128 for envelope cieling.

const uint8_t out2pin[] = {23, 0, 22, 25, 20, 6, 21, 5, 9, 4, 10, 3};//output number to actual teensy pin, dont change.
const uint8_t keyDivs[] = {4, 6 , 8, 12, 16, 32, 48, 64, 96, 128, 1, 2};//clock division for each key 4=1bar
const uint32_t rateScaler = 1636; //calculate this properly according to ISRrate when brain is working better

const int16_t sinTable[] = {
  0, 402, 804, 1206, 1607, 2009, 2410, 2811, 3211, 3611, 4011, 4409, 4807, 5205, 5601, 5997, 6392,
  6786, 7179, 7571, 7961, 8351, 8739, 9126, 9511, 9895, 10278, 10659, 11038, 11416, 11792, 12166, 12539,
  12909, 13278, 13645, 14009, 14372, 14732, 15090, 15446, 15799, 16150, 16499, 16845, 17189, 17530, 17868, 18204,
  18537, 18867, 19194, 19519, 19840, 20159, 20474, 20787, 21096, 21402, 21705, 22004, 22301, 22594, 22883, 23169,
  23452, 23731, 24006, 24278, 24546, 24811, 25072, 25329, 25582, 25831, 26077, 26318, 26556, 26789, 27019, 27244,
  27466, 27683, 27896, 28105, 28309, 28510, 28706, 28897, 29085, 29268, 29446, 29621, 29790, 29955, 30116, 30272,
  30424, 30571, 30713, 30851, 30984, 31113, 31236, 31356, 31470, 31580, 31684, 31785, 31880, 31970, 32056, 32137,
  32213, 32284, 32350, 32412, 32468, 32520, 32567, 32609, 32646, 32678, 32705, 32727, 32744, 32757, 32764, 32767,
  32764, 32757, 32744, 32727, 32705, 32678, 32646, 32609, 32567, 32520, 32468, 32412, 32350, 32284, 32213, 32137,
  32056, 31970, 31880, 31785, 31684, 31580, 31470, 31356, 31236, 31113, 30984, 30851, 30713, 30571, 30424, 30272,
  30116, 29955, 29790, 29621, 29446, 29268, 29085, 28897, 28706, 28510, 28309, 28105, 27896, 27683, 27466, 27244,
  27019, 26789, 26556, 26318, 26077, 25831, 25582, 25329, 25072, 24811, 24546, 24278, 24006, 23731, 23452, 23169,
  22883, 22594, 22301, 22004, 21705, 21402, 21096, 20787, 20474, 20159, 19840, 19519, 19194, 18867, 18537, 18204,
  17868, 17530, 17189, 16845, 16499, 16150, 15799, 15446, 15090, 14732, 14372, 14009, 13645, 13278, 12909, 12539,
  12166, 11792, 11416, 11038, 10659, 10278, 9895, 9511, 9126, 8739, 8351, 7961, 7571, 7179, 6786, 6392,
  5997, 5601, 5205, 4807, 4409, 4011, 3611, 3211, 2811, 2410, 2009, 1607, 1206, 804, 402, 0,
  -402, -804, -1206, -1607, -2009, -2410, -2811, -3211, -3611, -4011, -4409, -4807, -5205, -5601, -5997, -6392,
  -6786, -7179, -7571, -7961, -8351, -8739, -9126, -9511, -9895, -10278, -10659, -11038, -11416, -11792, -12166, -12539,
  -12909, -13278, -13645, -14009, -14372, -14732, -15090, -15446, -15799, -16150, -16499, -16845, -17189, -17530, -17868, -18204,
  -18537, -18867, -19194, -19519, -19840, -20159, -20474, -20787, -21096, -21402, -21705, -22004, -22301, -22594, -22883, -23169,
  -23452, -23731, -24006, -24278, -24546, -24811, -25072, -25329, -25582, -25831, -26077, -26318, -26556, -26789, -27019, -27244,
  -27466, -27683, -27896, -28105, -28309, -28510, -28706, -28897, -29085, -29268, -29446, -29621, -29790, -29955, -30116, -30272,
  -30424, -30571, -30713, -30851, -30984, -31113, -31236, -31356, -31470, -31580, -31684, -31785, -31880, -31970, -32056, -32137,
  -32213, -32284, -32350, -32412, -32468, -32520, -32567, -32609, -32646, -32678, -32705, -32727, -32744, -32757, -32764, -32767,
  -32764, -32757, -32744, -32727, -32705, -32678, -32646, -32609, -32567, -32520, -32468, -32412, -32350, -32284, -32213, -32137,
  -32056, -31970, -31880, -31785, -31684, -31580, -31470, -31356, -31236, -31113, -30984, -30851, -30713, -30571, -30424, -30272,
  -30116, -29955, -29790, -29621, -29446, -29268, -29085, -28897, -28706, -28510, -28309, -28105, -27896, -27683, -27466, -27244,
  -27019, -26789, -26556, -26318, -26077, -25831, -25582, -25329, -25072, -24811, -24546, -24278, -24006, -23731, -23452, -23169,
  -22883, -22594, -22301, -22004, -21705, -21402, -21096, -20787, -20474, -20159, -19840, -19519, -19194, -18867, -18537, -18204,
  -17868, -17530, -17189, -16845, -16499, -16150, -15799, -15446, -15090, -14732, -14372, -14009, -13645, -13278, -12909, -12539,
  -12166, -11792, -11416, -11038, -10659, -10278, -9895, -9511, -9126, -8739, -8351, -7961, -7571, -7179, -6786, -6392,
  -5997, -5601, -5205, -4807, -4409, -4011, -3611, -3211, -2811, -2410, -2009, -1607, -1206, -804, -402,
};

const int16_t triTable[] = {
  0,
  255, 511, 767, 1023, 1279, 1535, 1791, 2047, 2303, 2559, 2815, 3071, 3327, 3584, 3839, 4095,
  4351, 4608, 4863, 5119, 5375, 5631, 5887, 6143, 6399, 6655, 6911, 7167, 7423, 7679, 7935, 8191,
  8447, 8703, 8959, 9215, 9471, 9727, 9983, 10239, 10495, 10751, 11007, 11263, 11519, 11775, 12031, 12287,
  12543, 12799, 13055, 13311, 13567, 13823, 14079, 14335, 14591, 14847, 15103, 15359, 15615, 15871, 16127, 16383,
  16639, 16895, 17151, 17407, 17663, 17919, 18175, 18431, 18687, 18943, 19199, 19455, 19711, 19967, 20223, 20479,
  20735, 20991, 21247, 21503, 21759, 22015, 22271, 22527, 22783, 23039, 23295, 23551, 23807, 24063, 24319, 24575,
  24831, 25087, 25343, 25599, 25855, 26111, 26367, 26623, 26879, 27135, 27391, 27647, 27903, 28159, 28415, 28671,
  28927, 29183, 29439, 29695, 29951, 30207, 30463, 30719, 30974, 31231, 31487, 31743, 31998, 32255, 32511, 32767,
  32511, 32255, 31998, 31743, 31487, 31231, 30974, 30719, 30463, 30207, 29951, 29695, 29439, 29183, 28927, 28671,
  28415, 28159, 27903, 27647, 27391, 27135, 26879, 26623, 26367, 26111, 25855, 25599, 25343, 25087, 24831, 24575,
  24319, 24063, 23807, 23551, 23295, 23039, 22783, 22527, 22271, 22015, 21759, 21503, 21247, 20991, 20735, 20479,
  20223, 19967, 19711, 19455, 19199, 18943, 18687, 18431, 18175, 17919, 17663, 17407, 17151, 16895, 16639, 16383,
  16127, 15871, 15615, 15359, 15103, 14847, 14591, 14335, 14079, 13823, 13567, 13311, 13055, 12799, 12543, 12287,
  12031, 11775, 11519, 11263, 11007, 10751, 10495, 10239, 9983, 9727, 9471, 9215, 8959, 8703, 8447, 8191,
  7935, 7679, 7423, 7167, 6911, 6655, 6399, 6143, 5887, 5631, 5375, 5119, 4863, 4608, 4351, 4095,
  3839, 3584, 3327, 3071, 2815, 2559, 2303, 2047, 1791, 1535, 1279, 1023, 767, 511, 255, 0,
  -255, -511, -767, -1023, -1279, -1535, -1791, -2047, -2303, -2559, -2815, -3071, -3327, -3584, -3839, -4095,
  -4351, -4608, -4863, -5119, -5375, -5631, -5887, -6143, -6399, -6655, -6911, -7167, -7423, -7679, -7935, -8191,
  -8447, -8703, -8959, -9215, -9471, -9727, -9983, -10239, -10495, -10751, -11007, -11263, -11519, -11775, -12031, -12287,
  -12543, -12799, -13055, -13311, -13567, -13823, -14079, -14335, -14591, -14847, -15103, -15359, -15615, -15871, -16127, -16383,
  -16639, -16895, -17151, -17407, -17663, -17919, -18175, -18431, -18687, -18943, -19199, -19455, -19711, -19967, -20223, -20479,
  -20735, -20991, -21247, -21503, -21759, -22015, -22271, -22527, -22783, -23039, -23295, -23551, -23807, -24063, -24319, -24575,
  -24831, -25087, -25343, -25599, -25855, -26111, -26367, -26623, -26879, -27135, -27391, -27647, -27903, -28159, -28415, -28671,
  -28927, -29183, -29439, -29695, -29951, -30207, -30463, -30719, -30974, -31231, -31487, -31743, -31998, -32255, -32511, -32767,
  -32511, -32255, -31998, -31743, -31487, -31231, -30974, -30719, -30463, -30207, -29951, -29695, -29439, -29183, -28927, -28671,
  -28415, -28159, -27903, -27647, -27391, -27135, -26879, -26623, -26367, -26111, -25855, -25599, -25343, -25087, -24831, -24575,
  -24319, -24063, -23807, -23551, -23295, -23039, -22783, -22527, -22271, -22015, -21759, -21503, -21247, -20991, -20735, -20479,
  -20223, -19967, -19711, -19455, -19199, -18943, -18687, -18431, -18175, -17919, -17663, -17407, -17151, -16895, -16639, -16383,
  -16127, -15871, -15615, -15359, -15103, -14847, -14591, -14335, -14079, -13823, -13567, -13311, -13055, -12799, -12543, -12287,
  -12031, -11775, -11519, -11263, -11007, -10751, -10495, -10239, -9983, -9727, -9471, -9215, -8959, -8703, -8447, -8191,
  -7935, -7679, -7423, -7167, -6911, -6655, -6399, -6143, -5887, -5631, -5375, -5119, -4863, -4608, -4351, -4095,
  -3839, -3584, -3327, -3071, -2815, -2559, -2303, -2047, -1791, -1535, -1279, -1023, -767, -511, -255,
};

const int16_t sqTable[] = {32767, -32767}; //table lengths will be calculated after pointer table

const int16_t FMTableSQR[]  = {

  1190, 4042, 6447, 8468, 9930, 10951, 11695, 12293, 12901, 13547, 14283, 15099, 15924, 16720, 17521, 18272,
  19019, 19712, 20356, 20935, 21456, 21886, 22256, 22570, 22844, 23090, 23316, 23504, 23676, 23846, 24019, 24214,
  24433, 24679, 24946, 25222, 25507, 25784, 26057, 26337, 26607, 26871, 27123, 27354, 27563, 27755, 27922, 28081,
  28229, 28373, 28507, 28637, 28763, 28887, 29016, 29143, 29282, 29423, 29568, 29714, 29855, 29993, 30126, 30256,
  30379, 30492, 30595, 30688, 30763, 30830, 30891, 30943, 30989, 31034, 31080, 31122, 31167, 31212, 31267, 31326,
  31394, 31469, 31546, 31626, 31708, 31789, 31873, 31956, 32037, 32114, 32186, 32239, 32280, 32323, 32363, 32404,
  32444, 32478, 32505, 32530, 32549, 32569, 32585, 32599, 32614, 32628, 32645, 32659, 32671, 32684, 32698, 32711,
  32727, 32740, 32752, 32761, 32765, 32765, 32766, 32762, 32757, 32751, 32744, 32734, 32724, 32715, 32709, 32707,
  32708, 32712, 32719, 32725, 32730, 32735, 32738, 32740, 32739, 32731, 32716, 32691, 32659, 32619, 32574, 32526,
  32473, 32419, 32363, 32304, 32246, 32190, 32135, 32086, 32043, 32002, 31965, 31931, 31898, 31866, 31837, 31812,
  31790, 31767, 31743, 31716, 31686, 31654, 31617, 31579, 31539, 31492, 31442, 31385, 31322, 31257, 31188, 31119,
  31052, 30985, 30915, 30846, 30774, 30705, 30639, 30573, 30507, 30441, 30369, 30293, 30209, 30115, 30023, 29924,
  29816, 29701, 29576, 29438, 29295, 29144, 28994, 28847, 28701, 28563, 28428, 28292, 28163, 28041, 27925, 27824,
  27723, 27629, 27533, 27424, 27312, 27186, 27042, 26893, 26734, 26562, 26388, 26204, 26009, 25803, 25568, 25308,
  25009, 24669, 24279, 23844, 23332, 22732, 22050, 21246, 20356, 19393, 18356, 17258, 16162, 15015, 13872, 12732,
  11594, 10530, 9494, 8541, 7663, 6845, 6073, 5358, 4657, 3997, 3361, 2733, 2134, 1526, 935, 338,
  -251, -848, -1438, -2045, -2645, -3267, -3904, -4556, -5255, -5964, -6729, -7540, -8408, -9348, -10376, -11435,
  -12562, -13707, -14844, -15998, -17097, -18197, -19246, -20220, -21120, -21940, -22639, -23248, -23776, -24218, -24616, -24962,
  -25267, -25532, -25771, -25980, -26176, -26362, -26537, -26709, -26870, -27021, -27166, -27295, -27408, -27517, -27616, -27709,
  -27809, -27909, -28023, -28145, -28272, -28408, -28543, -28680, -28825, -28972, -29121, -29274, -29417, -29557, -29684, -29800,
  -29909, -30009, -30102, -30195, -30281, -30357, -30431, -30497, -30563, -30629, -30695, -30763, -30836, -30905, -30975, -31043,
  -31109, -31178, -31247, -31312, -31376, -31434, -31484, -31533, -31573, -31611, -31648, -31681, -31712, -31740, -31763, -31786,
  -31808, -31832, -31861, -31893, -31926, -31960, -31996, -32037, -32080, -32128, -32182, -32238, -32296, -32355, -32411, -32464,
  -32518, -32567, -32613, -32654, -32687, -32713, -32729, -32738, -32740, -32739, -32736, -32731, -32726, -32720, -32713, -32708,
  -32707, -32708, -32714, -32723, -32733, -32743, -32750, -32756, -32761, -32765, -32765, -32765, -32762, -32754, -32742, -32729,
  -32714, -32700, -32686, -32673, -32661, -32647, -32631, -32616, -32602, -32587, -32572, -32552, -32533, -32509, -32482, -32449,
  -32410, -32369, -32330, -32286, -32245, -32195, -32125, -32049, -31968, -31885, -31802, -31720, -31638, -31558, -31480, -31405,
  -31336, -31276, -31220, -31173, -31128, -31086, -31042, -30995, -30950, -30898, -30840, -30773, -30700, -30609, -30508, -30396,
  -30274, -30146, -30013, -29876, -29735, -29590, -29444, -29303, -29163, -29035, -28906, -28780, -28656, -28526, -28394, -28250,
  -28104, -27945, -27781, -27592, -27386, -27159, -26909, -26647, -26377, -26098, -25823, -25548, -25264, -24986, -24717, -24467,
  -24245, -24046, -23870, -23702, -23529, -23346, -23125, -22881, -22612, -22306, -21943, -21525, -21016, -20445, -19810, -19124,
  -18383, -17633, -16839, -16040, -15223, -14398, -13651, -12990, -12382, -11784, -11079, -10096, -8726, -6761, -4441, -1602,
};

const int16_t *LFOpool[] = {sinTable, triTable, sqTable, FMTableSQR};
const int16_t *LFOsel1,*LFOsel2,*LFOsel3;

const uint16_t LFOselLen[] = {23,23,31,23}; //number of bits to shift the accumulator > wavetable
//they could be got automatically with sizeof, couldnt get it to work because of *LFOsel
uint8_t LFO_wavenum1=0,LFO_wavenum2=0,LFO_wavenum3=0;
uint8_t s1 = 23,s2 = 23,s3 = 23; //bitshifts for ISR 

uint32_t vel[3]; //velocity level
int32_t ENVworking[3];
int32_t env[3];
uint32_t ENVdecay[] = {2048383,2048383,2048383};
uint32_t ENVattack[] = {2048383,2048383,2048383};
bool ENVactive[3];
uint16_t INvert;

uint8_t pulses;
uint8_t per16th;
bool playing;
uint32_t MIDIclockRate;
float BPM;

uint16_t pitchOut;
uint32_t LFO_rate_mult[] = {4, 4, 4};
uint32_t intBPM;
uint8_t quarters;
uint8_t sixteenths;

struct oscillator1
{
  uint32_t phase = 0;
  uint32_t phaseA = 0;
  int32_t phaseRemain = 0;
  int32_t phaseOffset = 0;
  uint32_t phaseOld = 0;
  int32_t wave1;
  int32_t wave2;
  int32_t wave3;
  int32_t wave4;
  int32_t nextwave;  
  int32_t phase_increment = 0;
}
lfo1;

struct oscillator3
{
  uint32_t phase = 0;
  uint32_t phaseA = 0;
  int32_t phaseRemain = 0;
  int32_t phaseOffset = 0;
  uint32_t phaseOld = 0;
  int32_t wave1;
  int32_t wave2;
  int32_t wave3;
  int32_t wave4;
  int32_t phase_increment = 0;
}
lfo3;

struct oscillator2
{
  uint32_t phase = 0;
  uint32_t phaseA = 0;
  int32_t phaseRemain = 0;
  int32_t phaseOffset = 0;
  uint32_t phaseOld = 0;
  int32_t wave1;
  int32_t wave2;
  int32_t wave3;
  int32_t wave4;
  int32_t nextwave;
  int32_t phase_increment = 0;
}
lfo2;

//uint8_t cc2out[] = {40, 41, 42, 1, 44, 45, 46, 47, 48, 49, 50, 51};

//elapsedMicros waitPrint;
elapsedMillis MIDIclockRateIn;

IntervalTimer LFOtimer;

void outUpdateISR_LFOs(void);

void setup() {
  // Initiate MIDI communications, listen to all channels

  for (int i = 0; i < 12; i ++) {
    if (out2pin[i]) {
      pinMode(out2pin[i], OUTPUT);
      analogWriteFrequency(out2pin[i], 40000);
    }
  }

  analogWriteResolution(12);

  for (int i = 0; i < 12; i ++) {//start up LED animation
    for (int j = 0; j < 128; j ++) {
      if (out2pin[i] == 0) analogWrite(A14, (j<<5 ));
      else analogWrite(out2pin[i], j<<5 );
      delay(1);
    }
    if (out2pin[i] == 0) analogWrite(A14, 0);
    analogWrite(out2pin[i], 0);
  }//end of start up animantion

  MIDI.begin(MIDI_CHANNEL_OMNI);
  // Connect the Handlers to the library, so it is called upon reception.
  MIDI.setHandleNoteOn(HandleNoteOn);  // Put only the name of the function
  MIDI.setHandleControlChange(HandleControlChange);
  MIDI.setHandleNoteOff(HandleNoteOff);
  MIDI.setHandleClock(HandleClock);
  MIDI.setHandleStart(HandleStart);
  MIDI.setHandleStop(HandleStop);
  MIDI.setHandleContinue(HandleContinue);

  LFOtimer.begin(outUpdateISR_LFOs, ISRrate);
  
  LFOsel1= LFOsel2 = LFOsel3 = LFOpool[0];
//  Serial.begin(115200);
//  while (!Serial) {
//    ; // wait for serial port to connect. Needed for native USB
//  }
//  Serial.println("dodeca");  

}

void loop() {

  MIDI.read();

  DO_INCREMENTS();
  //Serial.println(lfo1.phase_increment);
}
